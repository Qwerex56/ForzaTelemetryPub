@page "/"
@implements IDisposable

@using ForzaTelemetry.ForzaModels.DataAnalyzers
@using ForzaTelemetry.ForzaModels.DataOut.ForzaMotorsport
@using ForzaTelemetry.ForzaModels.Interfaces
@using ForzaTelemetry.ForzaModels.RaceDataModels
@using UdpListenerService.Listeners

@inject FmFhListener listener

@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@if (!listener.IsListening) {
    <button @onclick="OpenListener">
        Start recording
    </button>
} else {
    <button @onclick="() => { listener.StopListening(); }">
        End Listening
    </button>
}

@if (_fm8DataOutDashes.Count > 0) {
    <div>
        @foreach (var tireData in _fm8DataOutDashes.LastOrDefault(new Fm8DataOutDash()).GetTiresData()) {
            <p>Tire Data</p>
            <div>
                <p>Temperature: @tireData.Temperature</p>
                <p>Wear: @tireData.Wear</p>
            </div>
        }
    </div>
}

    <div>
        On throttle time: @_steerAnalyzer.OnThrottleTimePercentage()%
    </div>
    <div>
        On brake time: @_steerAnalyzer.OnBrakeTimePercentage()%
    </div>
    <div>
        On off throttle time: @_steerAnalyzer.OffThrottleTimePercentage()%
    </div>

Hello World


@code {
    private readonly List<Fm8DataOutDash> _fm8DataOutDashes = [];
    private readonly SteerAnalyzer _steerAnalyzer = new();
    private readonly CarTelemetryAnalyzer _telemetryAnalyzer = new();
    private ushort _lapNumber;
    
    private ushort LapNumber {
        get => _lapNumber;
        set {
            if (value <= _lapNumber) return;
            
            Console.WriteLine("New Lap");
            _steerAnalyzer.SaveLapSteerAndReset();

            _telemetryAnalyzer.SpeedChart();
            _telemetryAnalyzer.FlushSamples();
            
            _lapNumber = value;
        }
    }

    protected override bool ShouldRender() => true;

    private void OpenListener() {
        if (listener.IsListening) return;

        // Add events

        listener.OnPacketFormatted += CollectReceivedPackets;

        // Start listener
        Task.Run(() => listener.StartListening());

        Console.WriteLine("Opened listener");
    }

    private void CollectReceivedPackets(byte[] _, IDataOut dataOut) {
        if (dataOut is not Fm8DataOutDash fm8DataOut) return;
        if (fm8DataOut.IsRaceOn == 0) return;

        _fm8DataOutDashes.Add(fm8DataOut);
        
        LapNumber = fm8DataOut.LapNumber;
        
        var sample = new CarTelemetryData((ushort)fm8DataOut.Speed, 
            fm8DataOut.Accel, 
            fm8DataOut.Steer, 
            fm8DataOut.Brake, 
            fm8DataOut.Clutch, 
            (sbyte)fm8DataOut.Gear, 
            (ushort)fm8DataOut.CurrentEngineRpm);
        _steerAnalyzer.AddSample(sample);
        _telemetryAnalyzer.AddSample(sample);

        InvokeAsync(StateHasChanged);
    }

    public void Dispose() {
        listener.OnPacketFormatted -= CollectReceivedPackets;
    }

}