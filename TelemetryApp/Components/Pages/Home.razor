@page "/"
@implements IDisposable

@using ForzaTelemetry.ForzaModels.DataAnalyzers
@using ForzaTelemetry.ForzaModels.DataOut.ForzaMotorsport
@using ForzaTelemetry.ForzaModels.DataOut.Interfaces
@using ForzaTelemetry.ForzaModels.RaceDataModels

@using Plotly.Blazor
@using Plotly.Blazor.ConfigLib
@using Plotly.Blazor.Traces
@using Plotly.Blazor.Traces.ScatterLib
@using TelemetryApp.Classes
@using TelemetryApp.Controllers

@inject UdpOptions Configuration

@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

Port: @Configuration.IpAddress;

@if (_listener is not null) {
    @if (!_listener.IsListening) {
        <button @onclick="OpenListener">
            Start recording
        </button>
    } else {
        <button @onclick="() => { _listener.StopListening(); }">
            End Listening
        </button>
    }
}

<div>
    plotly:
    <PlotlyChart @bind-Config="_config"
                 @bind-Layout="_layout"
                 @bind-Data="_data"
                 @ref="_chart" />
</div>

@code {
    private FmFhListener? _listener = null;
    private readonly CarTelemetryAnalyzer _telemetryAnalyzer = new();
    private ushort _lapNumber;

    private PlotlyChart _chart = new();
    private Config _config = new();
    private Layout _layout = new();
    private IList<ITrace> _data = [];

    private ushort LapNumber {
        get => _lapNumber;
        set {
            if (value <= _lapNumber) return;

            _data = _telemetryAnalyzer.SpeedChart();
            _chart.React();

            SessionDataSingleton.FlushSamples();

            _lapNumber = value;
        }
    }

    protected override void OnInitialized() {
        _config = new() {
            Responsive = true,
            DisplayModeBar = DisplayModeBarEnum.False,
            Editable = false,
        };

        _layout = new() {
            Title = new() {
                Text = "Speed chart"
            },
        };

        _data = [
            new Scatter {
                Name = "Scatter trace",
                Mode = ModeFlag.Lines,
                X = [],
                Y = []
            }
        ];

        _listener = new(Configuration);
        base.OnInitialized();
    }

    protected override bool ShouldRender() => true;

    private void OpenListener() {
        if (_listener.IsListening) return;

        // Add events

        _listener.OnPacketFormatted += CollectReceivedPackets;

        // Start _listener
        Task.Run(() => _listener.StartListening());

        Console.WriteLine("Opened _listener");
        InvokeAsync(StateHasChanged);
    }

    private void CollectReceivedPackets(IDataOut dataOut) {
        if (dataOut is not Fm8DataOutDash fm8DataOut) return;
        if (fm8DataOut.IsRaceOn == 0) return;

        SessionDataSingleton.Instance.AddSample(fm8DataOut.GetCarTelemetryData());
        // _telemetryAnalyzer.UpdateSpeedChart(ref _data);
        // _data = _telemetryAnalyzer.SpeedChart();

        LapNumber = fm8DataOut.LapNumber;
     }

    public void Dispose() {
        _listener.OnPacketFormatted -= CollectReceivedPackets;
    }

}